var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站: https://mdecd2025.github.io/hw-41023114/ \n 學員作業倉儲:https://github.com/mdecd2025/hw-41023114 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'repo', 'text': 'tokentest \n \n \n', 'tags': '', 'url': 'repo.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Tasks1', 'text': '自行製作、更新可攜程式系統 \n 利用\xa0C:\\Portable_2023_fall 啟動舊版的可攜程式環境, 目的是要藉由舊版的 Python 執行\xa0 gen_p3132.py , 取得基本的 Python 後, 修改 start.bat, 以 Python313 啟動可攜. \n 之後利用 Python 3.13.2 在命令列執行 \xa0 get-pip.py , 以便安裝 pip.exe. \n 之後利用新版的 SciTE, Portablegit, PUTTY, ShareX, Wink 以及原有的 tmp 及 home_ipv6, 以另存新的 \xa0start.bat \xa0 啟動. \n 以下為操作影片, 影片中採用兩年前 C: 中的 Python 3.11 舊系統自製、更新為 Python 3.13.2 為主的新可攜程式環境. \n \n', 'tags': '', 'url': 'Tasks1.html'}, {'title': 'list', 'text': '此為2b list 以下有操作紀錄影片 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n \n  editor1 結束   ##########################################  \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'Tasks2', 'text': '', 'tags': '', 'url': 'Tasks2.html'}, {'title': 'ipv6', 'text': '以下有操作紀錄影片 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n \n', 'tags': '', 'url': 'ipv6.html'}, {'title': 'w3', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 這是上課準備所需學習的借GPT輔助來編撰code以及學習如何與GPT溝通才能得到需要的答案。 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'Tasks3', 'text': '', 'tags': '', 'url': 'Tasks3.html'}, {'title': 'Tasks4', 'text': '', 'tags': '', 'url': 'Tasks4.html'}, {'title': 'w6', 'text': 'solvespace新四連桿連接 \n 建造平面四連桿的尺寸設計: 固定桿長度 連結圓心 長為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m \n 4linkslvs.7z \n \n 在onshape中繪製圖形導入webots \n 其中繪製時要將尺寸訂為原本的10倍，如此導入後不會縮小 \n \n 修正後可運動結果 \n \n 此為模擬檔案 \n 4linkwe.7z \n 從上上周理解了webot的座標關係後，到了做第二版的四連桿已經比較上手了，中間一周是在了解甚麼東西可以產生webot所需要的obj檔，因此才有上面三部影片。 \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w4', 'text': '建造平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m \n 1.建立robot群組 \n 2.robot下的children建立1個solid群組，2個higejoint群組，並選一個為首要，命名為joint1 \n 3.solid的children中建立shape作為固定桿(X1,Y0.1,Z0.1) \n 4. joint1下的endpoint選擇solid性質，命名為link1，並往下的children中建立pose及higejoint，pose下在建立shape為主動桿(0.4,0.1,0.1) ，shape命名為link1，再將主動桿所屬的pose的translation設為(0.2,0,0)(此為link1中心點)，而higejoint為主動桿與第二桿連接，並命名為joint2。 \n 5.joint1的endpoint下有translation(此為連接處的座標點)，設(-0.5,0,0.1) \n 6.在joint1下有boundingObject，選擇pose，往下children選擇USE link1，並調整座標至(0.2,0,0)(與link1的pose座標一致)，在設置physics \n 7.以上順序重複製作，主要為base-->joint1-->link1--> joint2-->link2--> joint3-->link3-->joint4 \n 8.joint4在robot群組中的children，與joint1同排列，並將endpoint設為solidreference，並選為use link3 \n 9.每一階的joint中各有jointparameters、device、emdpoint，其中link1上的device要加入Rotationalmotor，並命名為motor \n 10.而每一階的jointparameters，axis設為(0,0,1)(意為繞z軸旋轉)，但anchor要設為桿的長度，這樣才是joint到joint的距離，分別為(-0.5,0,0)、(0.4,0,0)、(0.6,0,0)，此座標是接續的，原點根據base的起點，另外設置的joint4則為(0.5,0,0) \n \n \n 此為修改後的結果 \n \n 起初操作的過程我認為十分困難，大概花了3天學習webots，光是理解各個座標存在的相應關係、原理，就十分需要下功夫，更何況這並不是借老師範本就能一次成功的作業。 \n', 'tags': '', 'url': 'w4.html'}, {'title': 'Tasks5', 'text': '', 'tags': '', 'url': 'Tasks5.html'}, {'title': 'Blender', 'text': 'Blender顏色更改 \n \n 這是在上課時老師講解到的換色功能，在課堂中學習使用，下課後自行修改。 \n', 'tags': '', 'url': 'Blender.html'}, {'title': 'w7', 'text': '在老師的 cd2025_hw1_demo.7z 檔案中有三個split_stl_to_obj_scale的檔案，先將solvespace中四連桿機構從 \n 左上的File->Export Triangle Mesh下載STL檔，並在 split_stl_to_obj_scale的最下面有 \n \n 將STL檔案輸入於上面，並將這個python檔案帶入你要轉換的資料夾中，然後再使用SciTE執行，他會產生split_parts資料夾，並自動將obj檔都整理再此資料夾中。 \n 最後再將此obj檔直接導入webot中，將可不用自行訂製座標。 \n 操作影片於 HW2 \n  ##########################################  \n solvespace basket_ball_shooter繪製 \n \n solvespace basket_ball_shooter組裝 \n \n 基本的四連桿都練習過後，接下來做的就是實現四連桿實用，這兩部影片最大的困難是shooter的組裝，上傳的是成功的影片，第一次組裝時應該花了下午到晚上的時間，要理解組裝方向及相對關係才能排出先平行還是先共點。 \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w9', 'text': 'shooter導入webot \n \n 最大速度修改方法: \n joint1-->device-->RotationalMotor-->maxVelocity、maxTorque改10000\xa0 \n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w11', 'text': 'solvespace籃框繪製 \n \n \n 導入webot中: \n 1.籃框要加入robot的children下並使用solid \n ，， ，， \n 接下來加入籃框跟籃框sensor \n ，， ，， ，， \n 接下來更改sensor顏色存在 \n ，， \n \n 2.加入球體 \n ，， \n \n 3.加入地板 \n \n \n 4.更改worldinfo \n ，， \n \n 目前問題:不確定是籃框的甚麼部分設定出現問題，fourbar可以擊球，但碰到籃板後卻穿透了。 \n', 'tags': '', 'url': 'w11.html'}, {'title': 'Tasks6', 'text': '', 'tags': '', 'url': 'Tasks6.html'}, {'title': 'Tutorial1', 'text': 'Start webots \n 1.啟動 Webots 如果你還沒安裝 Webots，請先下載並安裝。安裝完成後，雙擊 Webots 的圖示啟動程式。第一次啟動時，可能會要求你選擇介面主題，選擇你喜歡的即可。 \n 2.建立新專案 點選「檔案」>「新建」>「新建專案目錄」，然後設定專案名稱為 my_first_simulation，並將世界檔案命名為 my_first_simulation.wbt。確保勾選「加入矩形競技場」選項，這樣就會自動建立一個包含地板和牆壁的簡單環境。 \n  ##########################################  \n Create a New World \n A World is a file containing information like where the objects are, what they look like, how they interact with each other, what is the color of the sky, and the definitions of gravity, friction, masses of the objects, etc. It defines the initial state of a simulation. The different objects are called Nodes and are organized hierarchically in a Scene Tree. Therefore, a node may contain sub-nodes. A world is stored in a file having the .wbt extension. The file format is derived from the VRML97 language, and is human readable. The world files must be stored directly in a directory called worlds. \n 一個 世界 （World）是一個檔案，包含像是物體的位置、外觀、它們如何互動、天空的顏色、以及重力、摩擦力、物體質量等定義的資訊。它定義了模擬的初始狀態。不同的物體被稱為 節點 （Nodes），並且以 場景樹 （Scene Tree）的階層結構組織。因此，一個節點可能包含子節點。世界檔案儲存在具有  .wbt  副檔名的檔案中。該檔案格式源自 VRML97 語言，並且是人類可讀的。世界檔案必須直接儲存在名為  worlds  的資料夾中。 \n World – 世界，這是 Webots 的基本檔案類型，定義模擬的初始狀態。 \n File – 檔案，這裡指的是儲存世界資訊的檔案。 \n Objects – 物體，Webots 中的模擬物件。 \n Interact with – 互動，指的是物體之間的交互行為。 \n Color of the sky – 天空顏色，環境的一部分，通常會在背景設定中修改。 \n Gravity – 重力，物理參數之一。 \n Friction – 摩擦力，物理參數之一。 \n Masses – 質量，物理參數之一。 \n Nodes – 節點，Webots 中的基本物件，可以包含其他物件（子節點）。 \n Scene Tree – 場景樹，將節點按照層次結構組織的方式。 \n Sub-nodes – 子節點，節點下層的結構。 \n .wbt extension – .wbt 副檔名，Webots 世界檔的格式。 \n VRML97 – 一種三維虛擬現實建模語言，Webots 世界檔格式來源。 \n Human readable – 人類可讀，表示該檔案格式容易理解。 \n \n 1.A is B that... \n 用來解釋 A 是 B 且 B 是什麼，這是一個常見的定義句型。 \n 例句： \n "A World is a file containing information like..." → 「世界是一個包含以下資訊的檔案……」 \n 2.like \n 用來舉例或列出類似的事物。 \n 例句： \n "...information like where the objects are, what they look like..." → 「像是物體的位置、外觀等資訊」 \n 3.and \n 用來連接詞語或句子中的多個項目。 \n 例句： \n "...the color of the sky, and the definitions of gravity, friction..." → 「天空顏色，還有重力、摩擦力的定義」 \n 4.Therefore \n 表示因果關係，通常用來引出結論。 \n 例句： \n "Therefore, a node may contain sub-nodes." → 「因此，一個節點可能包含子節點。」 \n 5.may \n 表示可能性，用來描述不確定的情況。 \n 例句： \n "A node may contain sub-nodes." → 「一個節點可能會包含子節點。」 \n 6.having \n 用來描述具有某種特徵的事物。 \n 例句： \n "A world is stored in a file having the .wbt extension." → 「世界檔案是儲存在具有 .wbt 副檔名的檔案中。」 \n 7.derived from \n 表示某事物來源於或基於某個東西。 \n 例句： \n "The file format is derived from the VRML97 language." → 「檔案格式來源於 VRML97 語言。」 \n 8.must be \n 用來強調必須做某事，是義務或要求。 \n 例句： \n "The world files must be stored directly in a directory called worlds." → 「世界檔案必須直接儲存在名為 worlds 的資料夾中。」 \n 主要是在講解場地 \n 調整地板和牆壁大小 在「場景樹」中選擇 RectangleArena，然後調整以下參數： \n floorTileSize：改為 0.25 0.25，讓地板磚塊變小。 \n wallHeight：改為 0.05，讓牆壁變矮。 \n 加入木箱 點選「新增」按鈕，選擇 PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid)，在競技場中間會出現一個大箱子。選擇這個箱子，然後調整以下參數： \n size：改為 0.1 0.1 0.1，讓箱子變小。 \n translation：改為 0 0 0.05，讓箱子稍微浮起。 \n 接著，使用複製貼上（Ctrl+C 和 Ctrl+V）來新增兩個箱子，並將它們移動到競技場的不同位置，避免它們都集中在中間。 \n  ##########################################  \n Add an e-puck Robot \n The e-puck is a small robot having differential wheels, 10 LEDs, and several sensors including 8 DistanceSensors and a Camera. In this tutorial we are only interested in using its wheels. \n e-puck 是一個小型機器人，擁有差速輪、10 顆 LED 燈和幾個感測器，包括 8 顆距離感測器和一個相機。在本教程中，我們只會關注它的輪子。我們會在接下來的教程中學習如何使用其他功能。 \n 主要在講解e-puck機器人 \n 加入 e-puck 機器人 點選「新增」按鈕，選擇 PROTO nodes (Webots Projects) / robots / mobile / e-puck，這樣就會在競技場中加入一台 e-puck 機器人。 \n 設定機器人控制程式 在「場景樹」中選擇 e-puck，然後在 controller 欄位中輸入控制程式的名稱，例如 my_controller。這樣，當我們建立控制程式時，機器人就會使用它來控制行為。 \n \n e-puck - 小型機器人，這是 Webots 中的預設機器人之一。 \n differential wheels - 差速輪，兩個輪子的轉速差控制機器人的移動。 \n LEDs - 發光二極管，這裡指的是機器人上的燈。 \n DistanceSensors - 距離感測器，用來測量機器人與物體的距離。 \n PROTO node - 一種 Webots 節點，用來創建可重用的自定義物件。 \n Scene Tree - 場景樹，Webots 的節點組織結構。 \n real-time - 即時模擬模式。 \n mass - 質量，物體的物理屬性之一。 \n basicTimeStep - 基本時間步長，用於控制物理模擬的步伐。 \n reset - 重置，將模擬恢復到初始狀態。 \n simulation - 模擬，指在 Webots 中執行的虛擬環境。 \n apply a force - 施加力，用於操控物體的移動。 \n ctrl key - 控制鍵，用於進行某些操作的快捷鍵。 \n  ##########################################  \n Create a New Controller \n We will now program a simple controller that will just make the robot move forwards. A controller is a program that defines the behavior of a robot. Webots controllers can be written in the following programming languages: C, C++, Java, Python, MATLAB, etc. C, C++ and Java controllers need to be compiled before they can be run as robot controllers. Python and MATLAB controllers are interpreted languages so they will run without being compiled. In this tutorial, we are going to use C as a reference language but all the code snippets are also available in C++, Java, Python and MATLAB. Refer to the language chapter to setup a controller using a different programming language. \n The controller field of a Robot node specifies which controller is currently associated to the robot. Note that the same controller can be used by several robots, but a robot can only use one controller at a time. Each controller is executed in a separate child process usually spawned by Webots. Because they are independent processes, controllers don\'t share the same address space, and may run on different processor cores. \n 控制器是一個程式，用來定義機器人的行為。Webots 控制器可以使用以下程式語言編寫：C、C++、Java、Python、MATLAB 等。C、C++ 和 Java 控制器需要編譯後才能作為機器人控制器運行，而 Python 和 MATLAB 控制器是直譯語言，因此不需要編譯就可以運行。在本教程中，我們將使用 C 作為參考語言，但所有的程式碼片段也會提供 C++、Java、Python 和 MATLAB 版本。若要使用其他程式語言設置控制器，請參閱語言章節。 \n 機器人節點（Robot node）的控制器欄位指定了當前與機器人相關聯的控制器。請注意，同一個控制器可以被多個機器人使用，但每次只有一個機器人可以使用同一個控制器。每個控制器都是在一個單獨的子進程中執行，這些子進程通常是由 Webots 啟動的。由於它們是獨立的進程，控制器之間不共享相同的地址空間，並且可能會在不同的處理器核心上運行。 \n Controller - 控制器：定義機器人行為的程式。 \n Robot node - 機器人節點：Webots 中的一個節點，代表機器人本身。 \n Program - 程式：計算機執行的指令集，這裡指的是控制機器人行為的程式。 \n Compiled - 編譯：將程式碼轉換為機器能執行的格式。 \n Interpreted - 直譯：程式碼不需要編譯，而是由解釋器直接執行。 \n Language - 語言：指程式語言，這裡提到 C、C++、Java、Python 和 MATLAB。 \n Independent processes - 獨立進程：指每個控制器在不同的進程中運行，互不影響。 \n Address space - 地址空間：記憶體中用來儲存程序和資料的區域。 \n Processor cores - 處理器核心：處理器中的獨立運算單元。 \n \n 1.We will now - 用來表示即將進行的動作，語氣較為強調未來行動。 \n 例句：We will now program a simple controller. \n 2.that will - 用來表示目的或未來的動作。 \n 例句：We will now program a simple controller that will just make the robot move forwards. \n 3.A controller is a program that - 定義和解釋某事物的結構，這裡是對「控制器」的解釋。 \n 例句：A controller is a program that defines the behavior of a robot. \n 4.can be written in - 表示某事物可以以某種方式來做，這裡用於說明控制器的語言選擇。 \n 例句：Webots controllers can be written in the following programming languages. \n 5.may run - 表示可能發生的狀況或行為。 \n 例句：...and may run on different processor cores. \n 6.is executed in - 描述某事物的運行或執行方式。 \n 例句：Each controller is executed in a separate child process usually spawned by Webots. \n 7.Refer to - 用來表示參考某資料或章節。 \n 例句：Refer to the language chapter to setup a controller using a different programming language. \n \n 主要在講解建立控制程式 在 Webots 中，控制程式是用來定義機器人行為的程式。你可以使用 Python、C、C++、Java 等語言來撰寫控制程式。這裡我們以 Python 為例。 \n 撰寫簡單的前進程式 在 Webots 的控制程式資料夾中，建立一個新的 Python 檔案，命名為 my_controller.py，並輸入以下程式碼： \n from controller import Robot, Motor\n\nTIME_STEP = 64\nMAX_SPEED = 6.28\n\nrobot = Robot()\n\nleftMotor = robot.getMotor(\'left wheel motor\')\nrightMotor = robot.getMotor(\'right wheel motor\')\n\nleftMotor.setPosition(float(\'inf\'))\nrightMotor.setPosition(float(\'inf\'))\n\nleftMotor.setVelocity(0.1 * MAX_SPEED)\nrightMotor.setVelocity(0.1 * MAX_SPEED)\n\nwhile robot.step(TIME_STEP) != -1:\n    pass\n \n \n  ##########################################  \n \n', 'tags': '', 'url': 'Tutorial1.html'}, {'title': 'Tutorial2', 'text': '在本教學中，我們將學習如何在環境中建立簡單的物件。第一步是建立一顆會與環境互動的球體。我們將探討與節點相關的多個概念：它們的意義、如何建立、如何關聯等。此外，我們還將了解如何設定物理屬性。 \n 將介紹幾種類型的節點。它們的詳細定義可以在參考手冊中找到。擁有節點圖表將有助於理解節點之間的繼承關係。 \n  ##########################################  \n The Solid Node \n The Solid Node This subsection introduces the most important base node in Webots: the Solid node, from which many other nodes derive. \n A Solid node represents a rigid body, that is a body in which deformation can be neglected. The distance between any two given points of a rigid body remains constant in time regardless of external forces exerted on it. For example a table, a robot finger phalanx or a wheel are rigid bodies. Soft bodies and articulated objects are not rigid bodies. For example, a rope, a tire, a sponge or an articulated robot arm are not rigid bodies. However, an articulated entity can be broken into several rigid bodies. \n The physics engine of Webots is designed for simulating rigid bodies only. An important step, when designing a simulation, is to break up the various entities into separate rigid bodies. \n To define a rigid body, you will have to create a Solid node. Inside this node you will set up different sub-nodes corresponding to the characteristics of the rigid body. The following figure depicts a rigid body and its sub-nodes. The graphical representation of the Solid node is defined by the Shape nodes populating its children list. The collision bounds are defined in its boundingObject field. The graphical representation and the collision shape are often but not necessarily identical. Finally, the physics field defines if the object belongs to the dynamical or to the static environment. All these sub-nodes are optional, but the physics field needs the boundingObject to be defined. \n 這一小節介紹了 Webots 中最重要的基礎節點： Solid 節點 ，許多其他節點都是從它衍生出來的。 \n Solid 節點代表一個剛體，也就是一種在模擬中可以忽略變形的物體。剛體中任意兩點之間的距離在時間中是保持不變的，即使有外力施加在上面也是如此。例如：桌子、機器人的指節、或是輪子，這些都是剛體。而軟體（soft bodies）或具有關節的物體則不屬於剛體，比如繩子、輪胎、海綿，或是關節式的機器人手臂就不是剛體。不過，一個有關節的物體可以拆解成數個剛體來處理。 \n Webots 的物理引擎專門用來 模擬剛體 。因此，在設計模擬時，一個重要的步驟就是把各個物件拆解成獨立的剛體。 \n 若要定義一個剛體，你需要建立一個 Solid 節點。在這個節點中，你將設定一些子節點來描述這個剛體的特性。下圖展示了一個剛體及其子節點的結構： \n 圖形外觀 （Graphical representation） 是由放在 children 清單中的 Shape 節點 來定義的。 \n 碰撞邊界 （Collision bounds） 則是由 boundingObject 欄位來設定。 \n 通常圖形外觀與碰撞形狀是一樣的，但不一定非得相同。 \n 最後，physics 欄位會決定這個物件是屬於 動態物件 還是 靜態環境 的一部分。 \n 所有這些子節點都是可選的，但若要使用 physics 欄位， 就必須定義  boundingObject。 \n \n Solid node Solid 節點、剛體節點 Webots 中用來定義剛體的節點 Rigid body 剛體 一種不會變形的物體 Deformation 變形 通常是物體在受力後的形狀改變 External force 外力 來自外部施加在物體上的力量 Soft body 軟體 可以變形的物體 Articulated object 關節式物體 有連接部位、可活動的物體 Physics engine 物理引擎 模擬物理行為的程式模組 Simulation 模擬 在電腦中模擬現實情境 Sub-node 子節點 階層式結構中的下層節點 Graphical representation 圖形表示 在 3D 視圖中可看到的外觀 Collision bounds 碰撞邊界 用於物理計算的碰撞區域 boundingObject 邊界物件欄位 定義碰撞邊界用的欄位 children list 子節點清單 包含 Shape 等節點的集合 Shape node 形狀節點 描述物體圖形的節點 physics field 物理欄位 決定是否加入動力模擬 dynamical/static environment 動態/靜態環境 是否會移動（物理互動）的物體 \n \n 1.This subsection introduces... \n 用來開始段落、介紹某主題。 \n 例句：This subsection introduces the most important base node in Webots. \n 翻譯：這一小節介紹了 Webots 中最重要的基礎節點。 \n 2.A Solid node represents... \n 主詞 + 動詞 + 補語 → 用來定義或說明某事物的功能。 \n 例句：A Solid node represents a rigid body. \n 翻譯：Solid 節點代表一個剛體。 \n 3.can be broken into... \n 被動語態 + break into，表示可被分成... \n 例句：An articulated entity can be broken into several rigid bodies. \n 翻譯：關節式物體可以被分成多個剛體。 \n 4.You will have to... \n 未來式 + have to，表示「你必須」。 \n 例句：You will have to create a Solid node. \n 翻譯：你將需要建立一個 Solid 節點。 \n 5....defined by... \n 表示由...定義、構成。 \n 例句：The graphical representation is defined by the Shape nodes... \n 翻譯：圖形表示是由 Shape 節點定義的。 \n 6....but not necessarily... \n 表示「但不一定是…」 \n 例句：...are often but not necessarily identical. \n 翻譯：通常是相同的，但不一定。 \n 7.All these sub-nodes are optional, but... \n 對比句型，用來表達例外或限制。 \n 例句：All these sub-nodes are optional, but the physics field needs the boundingObject to be defined. \n 翻譯：這些子節點都是可選的，但若要使用 physics 欄位，就必須定義 boundingObject。 \n \n 主要在講解 \n Solid 節點是 Webots 中最重要的基礎節點之一，代表一個剛體物件。它包含以下子節點： \n Shape：定義物件的外觀。 \n boundingObject：定義物件的碰撞邊界。 \n physics：定義物件的物理屬性。 \n 這些子節點是可選的，但如果要讓物件具有物理屬性，必須定義 boundingObject 和 physics。 \n  ##########################################  \n Create a Ball \n We will now add a ball to the simulation. That ball will be modeled as a rigid body as shown in this figure. A Sphere node will be used to define the geometry of our ball. \n Hands-on #4: In the scene tree view, select the last node and press the Add button. In the dialog, open the Bases nodes section and select the Solid node. In the scene tree view, expand the Solid node and select its children field. Add a Shape node to it by using the Add button. Select the appearance field of the Shape node and use the Add button to add a PBRAppearance node. \n 1.Add a Sphere node as the geometry field of the newly created Shape node. 2.Expand the PBRAppearance node and change its metalness field to 0 and its roughness field to 1. 3.Add another Sphere node to the boundingObject field of the Solid. 4.Finally add a Physics node to the physics field of the Solid. 5.By modifying the translation field of the Solid node, place the ball in front of the robot (at {0.2, 0, 0.2} for example). 6.Save the simulation. 7.The result is depicted in this figure. \n When the simulation is started, the ball hits the floor. You can move the ball by applying a force to it (ctrl + alt + left-click + drag). The contact points between the ball and the floor can be displayed as cyan lines by enabling the View / Optional Rendering / Show Contact Points menu item. \n 我們現在要在模擬中加入一顆球。這顆球將會被建模為一個 剛體 ，如下圖所示。我們將使用  Sphere  節點來定義這顆球的幾何形狀。 \n 實作 #4：  在  場景樹視圖  中，選取最後一個節點並按下  新增  按鈕。在跳出的對話框中，展開  Bases nodes  區段，然後選擇  Solid  節點。  在場景樹視圖中展開這個 Solid 節點，並選取它的  children  欄位。接著，按下  新增  按鈕加入一個  Shape  節點。  再選取剛加入的 Shape 節點的  appearance  欄位，使用新增按鈕加入一個  PBRAppearance  節點。 \n 在 Shape 節點的  geometry  欄位加入一個  Sphere  節點，作為球的幾何外觀。  展開 PBRAppearance 節點，將  metalness  欄位改為  0 ， roughness  欄位改為  1 。  在 Solid 節點的  boundingObject  欄位中再加入一個  Sphere  節點，用來定義碰撞邊界。  最後，在  physics  欄位加入一個  Physics  節點。 \n 透過修改 Solid 節點的  translation  欄位，把球放在機器人前面的位置（例如設為  {0.2, 0, 0.2} ）。  儲存這個模擬。 \n 這是你在 Webots 中建立的第一個剛體。 \n 當你開始模擬後，球會落到地板上。你可以透過施加力來移動這顆球（按住  Ctrl + Alt + 左鍵拖曳 ）。  若你想查看球與地面接觸的點，可以從功能表中點選： View > Optional Rendering > Show Contact Points ，就會以青綠色線條顯示出來。 \n \n Ball 球體 模擬中新增的物件 Rigid body 剛體 不會變形的物體，適合用於物理模擬 Solid node Solid 節點 Webots 中用來定義剛體的節點 Sphere node 球形節點 幾何形狀為球的節點 Shape node 外觀節點 定義圖形外觀 PBRAppearance node 實體外觀節點 用於設定金屬感、粗糙度等外觀屬性 boundingObject 邊界物件欄位 用來定義物理碰撞用的區域 Physics node 物理屬性節點 控制物體是否受重力、摩擦等影響 translation 位移欄位 設定物體在空間中的位置 metalness 金屬感 外觀參數，0 表示非金屬 roughness 粗糙度 外觀參數，1 表示完全粗糙 Apply a force 施加力量 移動物體的方式之一 Contact point 接觸點 物體接觸地面時產生的物理點 \n \n 1.We will now add... \n 表示即將執行的操作。 \n 例句：We will now add a ball to the simulation. \n 翻譯：我們現在要在模擬中加入一顆球。 \n 2.That ball will be modeled as... \n 被動語態 + as，用於描述物件如何被建模。 \n 例句：That ball will be modeled as a rigid body. \n 翻譯：這顆球會被建模成一個剛體。 \n 3.Select the ... and press the Add button. \n 指令句型，常見於操作教學中。 \n 例句：Select the last node and press the Add button. \n 翻譯：選取最後一個節點並按下新增按鈕。 \n 4.Expand ... and change its ... field to ... \n 表示進入某節點並修改其欄位。 \n 例句：Expand the PBRAppearance node and change its metalness field to 0. \n 翻譯：展開 PBRAppearance 節點，將 metalness 欄位設為 0。 \n 5.The result is depicted in this figure. \n 被動語態，用於說明結果已被圖示。 \n 例句：The result is depicted in this figure. \n 翻譯：結果如下圖所示。 \n 6.You can move the ball by... \n by + V-ing，表示透過某動作達成某目的。 \n 例句：You can move the ball by applying a force to it. \n 翻譯：你可以透過施加力量來移動這顆球。 \n 7.can be displayed by enabling... \n 被動語態 + by V-ing，表示可以透過某操作來達成。 \n 例句：The contact points can be displayed by enabling the View menu... \n 翻譯：接觸點可以透過啟用 View 選單來顯示。 \n \n 主要在講解如何建立球體 \n 1.新增 Solid 節點 在場景樹中選擇最後一個節點，點擊「新增」按鈕，選擇 Base nodes 中的 Solid 節點。 \n 2.新增 Shape 節點 展開 Solid 節點，選擇 children 欄位，點擊「新增」按鈕，選擇 Shape 節點。 \n 3.設定外觀 展開 Shape 節點，選擇 appearance 欄位，點擊「新增」按鈕，選擇 PBRAppearance 節點。將 metalness 設為 0，roughness 設為 1。 \n 4.設定幾何形狀 在 Shape 節點中，選擇 geometry 欄位，點擊「新增」按鈕，選擇 Sphere 節點。將 radius 設為 0.05，subdivision 設為 2。 \n 5.設定碰撞邊界 在 Solid 節點中，選擇 boundingObject 欄位，點擊「新增」按鈕，選擇 Sphere 節點。將 radius 設為 0.05，subdivision 設為 2。 \n 6.設定物理屬性 在 Solid 節點中，選擇 physics 欄位，點擊「新增」按鈕，選擇 Physics 節點。 \n 7.設定位置 在 Solid 節點中，選擇 translation 欄位，將其值設定為 {0.2, 0, 0.2}，將球體放置在機器人前方。 \n 8.儲存模擬 完成上述步驟後，儲存模擬檔案。 \n  ##########################################  \n Geometries \n To define the ball, we used the Sphere node in two different contexts: for the graphical representation (children) and to define the physical bounds (boundingObject). All Geometry nodes (such as the Sphere node) can be used in a graphical context. However, only a subset of them can be used in a physical context. The nodes chart diagram indicates which nodes are supported in each context. \n We are now going to reduce the size of the Sphere and increase its graphical quality by increasing the number of triangles used to represent it. \n Hands-on #5: For each Sphere node defining the ball, set its radius field to 0.05 and its subdivision field to 2. Refer to the Reference Manual to understand what the subdivision field stands for. \n 為了定義這顆球，我們在兩種不同的情境中使用了 Sphere（球體）節點： 一是在圖形呈現（children）中，另一個則是用來定義物理邊界（boundingObject）。 所有的幾何節點（像是 Sphere）都可以用在圖形呈現的情境中。 然而，只有其中一部分的幾何節點可以用在物理模擬的情境中。 你可以參考節點圖（nodes chart diagram），來確認每個節點在哪些情境中是被支援的。 \n 接下來我們要縮小球的大小，並且提升圖形品質，方法是增加用來呈現球體的三角形數量。 \n 實作#5 \n 對每一個定義球體的 Sphere 節點，將： \n radius 欄位設為 0.05， \n subdivision 欄位設為 2。 \n 若想進一步了解 subdivision 欄位的用途，可以參考官方的 Reference Manual（參考手冊）。 \n \n Geometry 幾何形狀 通常用來定義 3D 物件的外觀 Sphere node 球體節點 幾何節點之一，用來建立球形物件 Graphical representation 圖形呈現 指物體在 3D 視窗中看到的樣子 BoundingObject 邊界物件 物體的碰撞範圍，為物理模擬用 Physical context 物理情境 用於碰撞、重量、力等模擬計算 Subset 子集合、部分 指從一大類中選出的某幾個 Reduce 減少、降低 常用於尺寸、數量等 Subdivision 分割數、細分數 決定幾何圖形的精細度（三角形數） Radius 半徑 控制球體的大小 Reference Manual 參考手冊 官方說明文件 \n \n 1.We used the Sphere node in two different contexts. \n 表示「我們在兩種不同情境下使用了 Sphere 節點」。 \n in [情境] context 是很實用的寫法！ \n 例句翻譯：我們在兩種不同的情境中使用了 Sphere 節點。 \n 2.All Geometry nodes can be used in a graphical context. \n can be used：被動語態，表示「可以被使用」。 \n 例句翻譯：所有幾何節點都可以用在圖形呈現中。 \n 3.Only a subset of them can be used in a physical context. \n only a subset of：只有其中的一部分。 \n 例句翻譯：它們當中只有一部分可以用在物理情境中。 \n 4.We are now going to reduce the size of the Sphere. \n be going to + V：表示未來打算做某事。 \n 例句翻譯：我們現在要來縮小球體的大小。 \n 5.Increase its graphical quality by increasing the number of triangles. \n by V-ing：藉由做某事來達成目的。 \n 例句翻譯：透過增加三角形數量來提升圖形品質。 \n 6.Set its radius field to 0.05 and its subdivision field to 2. \n 指令句常用語法，常見於操作說明中。 \n 例句翻譯：將半徑欄位設為 0.05、細分欄位設為 2。 \n \n  ##########################################  \n DEF-USE Mechanism \n The DEF-USE mechanism allows to define a node in one place and to reuse that definition elsewhere in the scene tree. This is useful to avoid the duplication of identical nodes in world files. Moreover, it also allows users to modify several objects at the same time. Here is how it works: first a node is labeled with a DEF string. Then copies of this node can be reused elsewhere with the USE keyword. Only the fields of the DEF node can be edited, the fields of the USE inherit from the DEF node and cannot be changed. This mechanism is dependent on the order of the nodes in the world file. A DEF node should be defined before any corresponding USE node. \n The two Sphere definitions that we have used earlier to define the ball, are redundant. We will now merge these two Spheres into only once using the DEF-USE mechanism. \n Hands-on #6: Select the first Sphere node (the child of the Shape) in the scene tree view. The field editor of the scene tree view allows you to enter the DEF string. \n Enter BALL_GEOMETRY in this field. Select the boundingObject field (containing the second Sphere node), and empty it by right clicking the field in the scene tree and choosing the Delete entry in the context menu that pops up. Then, select the boundingObject field and click on the Add button, and select the USE / BALL_GEOMETRY in the dialog box. The result is shown in this figure. Now, changing the radius field of the first Sphere node also modifies its boundingObject. \n For convenience, the boundingObject field also accepts the Shape node (rather than the Sphere node directly). It would be also possible to use the same DEF-USE mechanism at the Shape level as shown in this figure. For now the greatest benefit is being able to also use this Shape directly for graphical purposes. Later this mechanism will turn out to be very useful for some sensors. \n DEF-USE 機制可以讓你在場景樹中的某一處定義一個節點，然後在其他地方重複使用這個定義。 這個機制的好處是可以避免在 world 檔中重複建立相同的節點，而且也能同時修改多個使用相同定義的物件。 \n 它的運作方式如下： \n 1.先使用 DEF 關鍵字替一個節點取一個名稱。 \n 2.接著，在其他位置可以使用 USE 關鍵字來引用這個節點。 \n 3. 只有被 DEF 定義的節點的欄位可以被修改 ，USE 的節點會繼承 DEF 的設定，不能獨立編輯。 \n 4.這個機制依賴 world 檔中的節點順序：必須先定義 DEF 節點，才能在後面使用對應的 USE 節點。 \n 我們之前為球體使用了兩個 Sphere 定義，這是重複的。 現在我們要用 DEF-USE 機制，合併成一個 Sphere 節點來重複使用。 \n 實作#6 \n \n \n 在場景樹中，選取第一個  Sphere  節點（ Shape  的子節點）。 \n \n \n 在欄位編輯器中輸入  DEF  名稱 →  BALL_GEOMETRY 。 \n \n \n 選取  boundingObject  欄位（裡面原本有第二個  Sphere  節點）： \n \xa0 \xa0右鍵 → 選擇「Delete」來清空內容。 \n \n \n 再次選取  boundingObject  欄位 → 按  Add  → 選擇  USE / BALL_GEOMETRY。 \n \n \n 如圖所示，現在只用一個 Sphere 就能同時定義圖形外觀和碰撞邊界。   當你改變第一個 Sphere 的  radius  時，它的  boundingObject  也會跟著改變。 \n 另外，為了方便起見， boundingObject  欄位其實也可以接受整個  Shape  節點（不只限於  Sphere ）。  因此也可以將整個  Shape  節點用  DEF-USE  重複使用，如圖所示。 \n 目前這樣做最大的好處是可以直接把這個  Shape  用來做圖形呈現，  以後我們在設定感測器（sensor）時，也會發現這個機制非常實用。 \n \n DEF-USE mechanism 定義與重複使用的機制 Webots 中節點重用的重要工具 Scene tree 場景樹 所有節點階層結構的視覺呈現 Node 節點 Webots 中的基本建構單元 Field editor 欄位編輯器 可編輯節點屬性的地方 BoundingObject 碰撞邊界物件欄位 定義物理碰撞區域 Graphical representation 圖形呈現 物體在 3D 視圖中所呈現的外觀 Context menu 快速選單、右鍵選單 使用者右鍵點擊時出現的功能選單 Convenience 便利性、方便性 在說明某功能使用上較為方便時常見用詞 Inherit 繼承 指 USE 會繼承 DEF 的屬性設定 \n \n 1.The DEF-USE mechanism allows [動詞片語] \n 表示「這個機制可以讓你做…」 \n The DEF-USE mechanism allows to define a node… \n DEF-USE 機制可以讓你定義節點… \n 2.Only the fields of the DEF node can be edited. \n 被動語態 + 限定詞 only，常見於規則說明。 \n Only the fields of the DEF node can be edited. \n 只有 DEF 節點的欄位可以被修改。 \n 3.The fields of the USE inherit from the DEF node. \n 簡潔地表達繼承關係，用於物件導向、資料繼承等情境。 \n The fields of the USE inherit from the DEF node. \n USE 的欄位會繼承 DEF 的設定。 \n 4.A DEF node should be defined before any corresponding USE node. \n should be + 過去分詞：表示應該要做某事的被動句型。 \n A DEF node should be defined before any corresponding USE node. \n DEF 節點應該要在對應的 USE 節點之前定義好。 \n 5.Now, changing the radius field... also modifies its boundingObject. \n Now, + V-ing：現在做某事會產生什麼結果。 \n Now, changing the radius field also modifies its boundingObject. \n 現在，改變半徑也會同時改變碰撞邊界。 \n \n 主要在講解DEF-USE機制 \n 為了減少節點重複，我們可以使用 DEF-USE 機制。 \n \n \n 設定 DEF 標籤  在場景樹中，選擇  Shape  節點，展開它，找到  geometry  欄位，選擇  Sphere  節點，將  DEF  欄位設定為  BALL_GEOMETRY 。 \n \n \n 使用 USE 標籤  在場景樹中，選擇  Solid  節點，展開它，找到  boundingObject  欄位，右鍵點擊，選擇「刪除」。然後，點擊「新增」按鈕，選擇  USE / BALL_GEOMETRY 。 \n \n \n 這樣，當你修改  BALL_GEOMETRY  的屬性時，所有使用  USE / BALL_GEOMETRY  的節點都會同步更新。 \n  ##########################################  \n \n', 'tags': '', 'url': 'Tutorial2.html'}, {'title': 'Tutorial3', 'text': 'The aim of this tutorial is to familiarize yourself with some nodes related to the graphical rendering. Good looking simulations can be created very quickly when these nodes are used adequately. A good graphics quality does not only enhance the user\'s experience, it is also essential for simulations where robots perceive their environment (camera image processing, line following, etc.). \n 這個教學的目的是讓你熟悉一些跟圖形渲染相關的節點。只要善用這些節點，就能很快做出視覺效果不錯的模擬畫面。畫面品質好不只會讓使用者體驗更好，對於那些需要靠影像來感知環境的模擬（像是攝影機影像處理、循線等等）來說，也非常重要。 \n  ##########################################  \n Light \n Lights The lighting of a world is determined by Light nodes and the Background . There are three types of light nodes: the DirectionalLight, the PointLight and the SpotLight. A DirectionalLight simulates a light which is infinitely far (ex: the sun), a PointLight simulates light emitted from a single point (ex: a light bulb), and a SpotLight simulates a conical light (ex: a flashlight). This figure shows a comparison between them. Each type of light node can cast shadows. \n 一個場景的光線是由 Light 節點和背景來決定的。Light 節點有三種類型：DirectionalLight（方向光）、PointLight（點光源）和 SpotLight（聚光燈）。 \n DirectionalLight 模擬的是從無限遠處照射過來的光（例如：太陽）。 \n PointLight 則是從某個點發出來的光（例如：電燈泡）。 \n SpotLight 則是錐形照射的光（例如：手電筒）。 \n \xa0 \n lighting 照明、光線配置，指整個場景的光影效果。 determined by 由...決定，常用於說明某件事的因素或來源。 Light nodes 燈光節點，是 Webots 中用來產生光源的物件。 Background 背景，這裡指模擬環境的背景會影響整體照明效果。 DirectionalLight 方向光，模擬來自遠處（如太陽）的平行光。 PointLight 點光源，模擬從一個點向四周發射的光（如燈泡）。 SpotLight 聚光燈，模擬錐形範圍內的光（如手電筒）。 simulate 模擬、模仿，是模擬軟體常見的術語。 cast shadows 投影，意指該光源會產生陰影效果。 Reference Manual 參考手冊，通常指官方文件或說明書。 \n \n 1.The lighting of a world is determined by Light nodes and the Background. \n 句型結構：被動語態（is determined by） \n 主詞：The lighting of a world（這個世界的照明） \n 動詞：is determined（被決定） \n 介詞片語：by Light nodes and the Background（由光源節點和背景決定） \n 用來強調「誰」或「什麼」決定了照明效果，是科技文常見句型。 \n 2.There are three types of light nodes: the DirectionalLight, the PointLight and the SpotLight. \n 句型結構：There are + 名詞（用來說明有某些東西存在） \n 適合用來介紹種類、列表或分類。 \n 3.A DirectionalLight simulates a light which is infinitely far. \n 文法重點： \n which is infinitely far 是形容詞子句，用來修飾「light」 \n infinitely 為副詞，修飾形容詞 far，表示「非常遠」。 \n 常見的定義型句式，用來描述某個東西的作用或特性。 \n 4.Each type of light node can cast shadows. \n 句型結構：助動詞 can + 原形動詞（cast）→ 表示能力 \n 用來說明這些光源節點有什麼功能。 \n 5.You can find their complete documentation in the Reference Manual. \n 句型結構：can + find（表達能力/可能） \n 是一種常見的指引說法，鼓勵讀者去查閱手冊。 \n  ##########################################  \n Modify the Appearance of the Walls \n Modify the Appearance of the Walls The aim of this subsection is to color the walls in blue. \n The Appearance and PBRAppearance nodes of the Shape node determine the graphical appearance of the object. Among other things, these nodes are responsible for the color and texture of objects. \n Prefer PBRAppearances for a better rendering as shown in the following comparison. \n Hands-on #2: In the Shape node representing graphically the first wall, add a PBRAppearance node to the appearance field. \n Set its baseColor field to blue using the color selector. Set its metalness field to 0 using the field editor. Finally, set its roughness field to 0.5 using the field editor. If the DEF-USE mechanism of the previous tutorial has been correctly implemented, all the walls should turn blue. \n Add an Existing Appearance to the Ball A number of pre-defined PBRAppearance are provided in the Webots release. \n Hands-on #3: Add a pre-defined PBRAppearance \n Select the appearance field and remove the previously added node. To do this, either press the "delete" button on your keyboard or right-click on the field and select "delete" from the menu. The field should now say "appearance NULL" instead of "appearance PBRAppearance". Double-click on the field again, then navigate to PROTO nodes (Webots Projects), then appearances and select OldSteel (PBRAppearance). \n \n 修改牆壁的外觀 這一小節的目標是把牆壁改成藍色的。 \n 在 Webots 中，Shape 節點裡的 Appearance 跟 PBRAppearance 這兩個節點會決定物件的外觀。像是顏色、材質（紋理）等等都是靠它們設定的。 \n 為了讓畫面更真實，建議你使用 PBRAppearance，下面這張圖就展示了兩者的差別。 \n \n 實做 #2：讓第一面牆變藍色 找到用來顯示第一面牆的 Shape 節點，在它的 appearance 欄位加上一個 PBRAppearance 節點。 \n 把 baseColor（底色）設成藍色，可以用顏色選擇器來設。 \n 把 metalness（金屬感）設成 0，用欄位編輯器改。 \n 把 roughness（粗糙度）設成 0.5，也是一樣用欄位編輯器改。 \n 如果你有按照前一個教學設定好 DEF-USE 機制，那麼只要改一面牆，其他牆也會一起變藍。 \n ##給球體加上已經做好的外觀 Webots 裡面其實有一堆預設好的 PBRAppearance，可以直接拿來用。 \n 實做 #3：套用一個預設的 PBRAppearance 先選到球體的 appearance 欄位，刪掉原本加的節點。可以按鍵盤上的 delete，或者右鍵點選「delete」。 \n 成功刪除的話，欄位會從「appearance PBRAppearance」變成「appearance NULL」。 \n 接著再雙擊這個欄位，然後依序點進： \n PROTO nodes (Webots Projects) → appearances → 選 OldSteel (PBRAppearance)。 \n \n Appearance / PBRAppearance 控制物件的外觀樣式，PBRAppearance 提供更真實的渲染效果。 Shape node Webots 中用來表示物體形狀的節點。 baseColor 物件的底色。 metalness 金屬感，用數值表達材質像不像金屬（0 = 非金屬，1 = 金屬）。 roughness 粗糙程度，數值越高越不光滑。 field editor 欄位編輯器，用來改節點的屬性。 color selector 顏色選擇器，點選後可選顏色。 appearance NULL 表示目前沒有設定 appearance。 PROTO node 預先定義好的節點，可以重複使用。 DEF-USE 機制 Webots 中讓一個節點可以重複使用的機制。 \n \n 1.The aim of this subsection is to... \n 結構：主詞 + be 動詞 + to V \n 用來說明某段教學的目的，很常見於技術文件。 \n 2.Among other things, these nodes are responsible for... \n 表達「除了其他功能外，這些節點的責任是...」 \n be responsible for 表示「負責…」、「控制…」 \n 3.Set its baseColor field to blue using the color selector. \n 這是一種常見的指令句，用動詞原形開頭（Set），常見於說明手冊。 \n using + 工具 → 表示用什麼工具去完成動作。 \n 4.If the DEF-USE mechanism... has been correctly implemented... \n 現在完成式被動語態：has been + 過去分詞 \n 表示某個設定是否已經正確完成。 \n 5.Select the appearance field and remove... \n 這類句子都是指令式，直接用動詞原形（Select, Remove）開頭，常見於步驟教學。 \n  ##########################################  \n Add a Texture from Disk \n Add a Texture from Disk The aim of this subsection is to apply a locally available texture to the ball. A texture on a rolling object can help to appreciate its movement. Hands-on #4: add a locally available texture to the ball. Download the texture available here and save it to your disk. Remove the previously added node from the appearance field and add a PBRAppearance node instead. Add an ImageTexture node to the baseColorMap field of the PBRAppearance node. Add an item to the ImageTexture\'s url field using the Add button. Then set the value of the newly added url item using the "Select" button. Follow the path to the location where you saved the texture and select it. The texture URLs must be defined either relative to the worlds directory of your project directory or relative to the default project directory WEBOTS_HOME/projects/default/worlds. Open the red_brick_wall.jpg texture in an image viewer while you observe how it is mapped onto the Sphere node in Webots. Textures are mapped onto Geometry nodes according to predefined UV mapping functions described in the Reference Manual. A UV mapping function maps a 2D image representation to a 3D model. \n \n 這一小節的目的是把本機電腦上的材質圖貼到球體上。 球體有材質圖的話，當它在滾動時，你會更容易看出它的動作。 \n 實作 #4：給球體加上一張本地的材質貼圖 先下載這裡提供的材質圖，然後把它存到你的電腦上。 \n 到 appearance 欄位，把之前加的節點刪掉，改成加一個 PBRAppearance 節點。 \n 在這個 PBRAppearance 裡的 baseColorMap 欄位，加一個 ImageTexture 節點。 \n 點一下 ImageTexture 的 url 欄位，用「Add」按鈕新增一個項目。 \n 新增完以後，按「Select」按鈕，選取你剛才下載的圖片。 \n 找到你存放圖片的資料夾，選取那張圖片。 \n 小提醒：這個圖片的網址（URL）一定要是相對於你的 world 資料夾，或者是相對於 Webots 的預設資料夾：WEBOTS_HOME/projects/default/worlds。 \n 接著，你可以在圖像檢視器中打開這張 red_brick_wall.jpg 圖片，一邊觀察它是怎麼被貼到球體（Sphere node）上的。 \n 貼圖是怎麼運作的？ Webots 會根據預先定義好的 UV mapping 函數，把 2D 的圖片貼到 3D 物件上。 \n UV mapping 就是把一張平面圖片「攤平」貼到 3D 模型表面的技術，詳細的說明可以看參考手冊。 \n \n texture 材質圖、貼圖，用來給物件表面加上圖案或細節。 locally available 本機可用的，表示檔案已經存在於你的電腦中。 apply 套用（某個設定、圖案等）。 rolling object 滾動中的物體（如球）。 ImageTexture Webots 中用來載入圖片貼圖的節點。 url field 圖片的位置（網址或路徑），可以是相對路徑。 baseColorMap 貼圖的位置，會貼在物件的底色上。 relative to 相對於…（用於說明檔案路徑的定位）。 UV mapping 把 2D 圖片對應到 3D 模型的技術。 WEBOTS_HOME Webots 的安裝根目錄（系統預設資料夾）。 \n \n 1.The aim of this subsection is to... \n 句型結構：主詞 + be + to V \n 用來說明這段內容的目標或任務。 \n 2.can help to appreciate its movement \n help to V 是常見結構，表示「幫助你能...」 \n appreciate 在這裡不是「感激」，而是「看得出來、欣賞」。 \n 3.Follow the path to... \n 這是常見的操作指令句，叫使用者去找某個路徑或資料夾。 \n 4.Textures are mapped onto... \n 被動語態：Textures are mapped（貼圖被套用到…上） \n 技術說明中常見的語態，用來解釋系統自動處理的事情。 \n 5.described in the Reference Manual \n 過去分詞當形容詞使用，說明「被描述於參考手冊中」。 \n  ##########################################  \n Rendering Options \n Rendering Options Webots offers several rendering modes available in the View menu. Hands-on #5: View the simulation in wireframe mode by using the View / Wireframe Rendering menu item. Then restore the plain rendering mode: View / Plain Rendering. Others rendering features can be helpful: View Coordinates systems: View / Optional Rendering / Show Coordinates System ctrl-F1 View distance sensor rays: View / Optional Rendering / Show DistanceSensor Rays ctrl-F10 \n \n Webots 提供了幾種不同的渲染模式，你可以從 View（檢視）選單中切換。 \n 實作 #5：切換線框模式 到選單中點選：View / Wireframe Rendering，就可以切換成 線框模式（看起來像只有線條輪廓的畫面）。 \n 想要恢復正常顯示，選擇：View / Plain Rendering。 \n 除了這些，還有其他實用的渲染功能可以幫助你觀察模擬： \n 顯示座標系統：View / Optional Rendering / Show Coordinates System（快捷鍵：Ctrl + F1） \n 顯示距離感測器的光線：View / Optional Rendering / Show DistanceSensor Rays（快捷鍵：Ctrl + F10） \n \n 1.Webots offers several rendering modes... \n offer + 受詞：提供... \n 用來介紹功能是很常見的句型。 \n 2.Hands-on #5: View the simulation in wireframe mode... \n 指令句：直接用動詞原形（View）開頭，常見於教學手冊。 \n in wireframe mode：用介系詞 in 表示「以某種模式」。 \n 3.Then restore the plain rendering mode... \n restore：恢復，這裡用來指切換回預設顯示方式。 \n 4.Others rendering features can be helpful: \n 正確寫法應該是 Other rendering features（語法上這是小錯誤，other 沒有 s） \n can be helpful：可以很有幫助，常見於說明提示中。 \n 5.Show Coordinates System ctrl-F1 \n 命令 + 快捷鍵：這種格式在教學說明中很常見，用來告知操作與快捷鍵對應方式。 \n \n', 'tags': '', 'url': 'Tutorial3.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n 執行結果於17:02 \n \n 過程與心得 \n 建造平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m \n 1.建立robot群組 \n 2.robot下的children建立1個solid群組，2個higejoint群組，並選一個為首要，命名為joint1 \n 3.solid的children中建立shape作為固定桿(X1,Y0.1,Z0.1) \n 4. joint1下的endpoint選擇solid性質，命名為link1，並往下的children中建立pose及higejoint，pose下在建立shape為主動桿(0.4,0.1,0.1) ，shape命名為link1，再將主動桿所屬的pose的translation設為(0.2,0,0)(此為link1中心點)，而higejoint為主動桿與第二桿連接，並命名為joint2。 \n 5.joint1的endpoint下有translation(此為連接處的座標點)，設(-0.5,0,0.1) \n 6.在joint1下有boundingObject，選擇pose，往下children選擇USE link1，並調整座標至(0.2,0,0)(與link1的pose座標一致)，在設置physics \n 7.以上順序重複製作，主要為base-->joint1-->link1--> joint2-->link2--> joint3-->link3-->joint4 \n 8.joint4在robot群組中的children，與joint1同排列，並將endpoint設為solidreference，並選為use link3 \n 9.每一階的joint中各有jointparameters、device、emdpoint，其中link1上的device要加入Rotationalmotor，並命名為motor \n 10.而每一階的jointparameters，axis設為(0,0,1)(意為繞z軸旋轉)，但anchor要設為桿的長度，這樣才是joint到joint的距離，分別為(-0.5,0,0)、(0.4,0,0)、(0.6,0,0)，此座標是接續的，原點根據base的起點，另外設置的joint4則為(0.5,0,0) \n \n 起初操作的過程我認為十分困難，大概花了3天學習webots，這部成功的影片已經是操作過第四次了 \n /downloads/HW1.7z', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n 執行結果於15:38 \n \n 過程與心得 \n 1.使用HW1的尺寸進行solvespace繪製兩個圓形基座，40的主動桿，60的浮桿，90的搖桿，R4的圓弧，R2.5的孔 \n 2.接著使用一開始繪製的線架構草圖進行組裝 \n 3.組裝完成後存檔，並輸出存檔一個stl檔(Export Triangle Mesh)\xa0 \n 4.將stl使用曾經使用的"split_stl_to_obj_scale2"進行轉obj檔，在4link.stl這個地方做更改，改為自己取的名字.stl \n \n 5.進入webot後，先加入Robot群組 \n 6.在Robot群組下的children加入兩個Solid作為base，再加入兩個Hingejoint一個做為joint1一個為joint4 \n 7.Solid base下的 children加入cadshape，並加入剛剛轉好的base的obj檔 \n 8.joint1下的endpoint選擇Solid，並加入joint2和cadshape，並將下面的name改link1，在到cadshape下導入剛轉好的obj檔 \n 9.往回點開剛剛加入的joint2，並如joint下的操作，endpoint選擇Solid，並加入joint3、cadshape，並將下面的name改link2 \n 10.再找回joint3，並加入最後的link3， \n 11.最後在回到最頂端找回joint4，並將joint4的endpoint設為Solidrefeference，並選擇剛剛的link3 \n 12.回頭補上在endpoint下所有的boundobject，設為Mesh，並選擇對應的obj檔 \n 13.再加入physics \n 14.再找回每一階的joint下的jointparameters，每一階的axis旋轉方向都是z軸，因此設為0、0、1，並更改每一階的anchor，joint1的為0、0、0，joint2的為0、0.4、0，joint3的為0.4963、0.7608、0，joint4的為0.5、0、0(這些數據可使用solvespace獲得)(solvespace上的尺寸進入webot需要縮小100倍)。 \n 15.加入controller，並在joint1下的device加入Rotationalmotor並改名為motor \n \n 有了先前HW1的基礎後，我認為執行HW2確實輕鬆得多，不過在影片中anchor本還不熟悉，執行完HW2後還有多做過其他檔案的對比，才了解anchor能夠由solvespace取得 \n /downloads/HW2.7z', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n \n 過程與心得 \n 在先前建立好的fourbar下在加入w11繪製的地板及籃框，籃框要導入Robot群組下並建立sensor，但是我的結果卻出現球碰不籃框籃板的問題，不論在webot2025下還是2023都會出現這樣的問題，不管是將stand移出robot群組使其單獨或是重新加入自有的stand或借demo都會發生，另外也有藉AI幫助進行對比，但並無差異。 \n 最後是由更改籃球框座標後竟然就解決了，將籃框上移，使球碰到籃框支架後再放置回原本的位置，整體的boundobject就計算了，不明白屬於是BUG或是其他條件。 \n /downloads/HW3.7z', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: \n w2-w3:各個github前置作業以及班級list整理學習 \n w4:solvespace及webot四連桿練習 \n w5-w6:第二版四連桿繪製組裝與導入webot練習 \n w7:Blender換色以及 basket_ball_shooter繪製組裝 \n 各週網頁內容: repo 、 list 、 ipv6 、 w3 、 w4 、 w6 、 w7 、 Blender 、 HW1 、 HW2 \n 期中心得:我認為這堂課我學到很重要的一件事，"自學"，至少我認為在這堂課中到現在為止，自學都是很重要的，而自學所要花的功夫就深了，要找資料、方法、或是問朋友，但總歸都是得花大量時間來完成。 \n 期中自評影片:上面為心得，下面為自評 \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 \n 1.先加入Robot群組 \n 2.在Robot群組下的children加入Solid作為base，再加入兩個Hingejoint一個做為joint1一個為joint4 \n 3.joint1下的endpoint選擇Solid，並加入joint2和Pose，並將下面的name改link1 \n 4.endpoint下的translation設-0.5、0、0.1，此為轉軸的座標 \n 5.rotation設為0、0、1、0.244rad(此為學號後兩碼14-->14度轉rad) \n 6.Pose下的children加入box作為連桿1，長度為0.4、0、0 \n 7.再將Pose的 translation設為連桿1長度的一半0.2、0、0 \n 8.往回點開剛剛加入的joint2，並如joint下的操作，endpoint選擇Solid，並加入joint3、Pose1、Pose2，並將下面的name改link2 \n 9.joint2下的endpoint下的translation設0.4、0、0.1，此為轉軸2的座標 \n 10.rotation設為0、0、1、1.25891rad \n 11.Pose1下建立長度為0.6、0、0的box，並將Pose1的translation設為連桿2長度的一半0.3、0、0 \n 12.Pose2下建立長度為0.3、0、0的box，並將Pose2的 translation設為0.3、0.15、0，rotation設為 0、0、1、-1.57rad \n 13.再找回joint3，並加入最後的link3，長度為0.9、0、0，endpoint中的translation設0.6、0、-0.1 \n 14.rotation設為0、0、-1、2.38621 rad \n 15.最後在回到最頂端找回joint4，並將joint4的endpoint設為Solidrefeference，並選擇剛剛的link3 \n 16.回頭補上在endpoint下所有的boundobject，設為Pose，並在下方的children加上box，Pose座標為以上所有方塊所屬的Pose的座標 \n 17.再加入physics \n 18.再找回每一階的joint下的jointparameters，每一階的axis旋轉方向都是z軸，因此設為0、0、1，並更改每一階的anchor，joint1的為-0.5、0、0，joint2的為0.4、0、0，joint3的為0.6、0、0。 \n 19.加入controller \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n 1. 依照個人學號的最後兩碼作為依據，因此我的連桿主動桿訂為1.14而在solve上要變成114，浮桿為160，搖桿為180，基座距離為140。 \n 2.接著使用一開始繪製的線架構草圖進行組裝(主動桿依據題目限制，訂好角度之後要把角度刪掉令線架構可活動) \n 3.組裝完成後存檔，並輸出存檔一個stl檔(Export Triangle Mesh)\xa0 \n 4.將stl使用曾經使用的"split_stl_to_obj_scale2"進行轉obj檔，在4link.stl這個地方做更改，改為自己取的名字.stl \n \n 5.進入webot後，先加入Robot群組 \n 6.在Robot群組下的children加入兩個Solid作為base，再加入兩個Hingejoint一個做為joint1一個為joint4 \n 7.Solid base下的 children加入cadshape，並加入剛剛轉好的base的obj檔 \n 8.joint1下的endpoint選擇Solid，並加入joint2和cadshape，並將下面的name改link1，在到cadshape下導入剛轉好的obj檔 \n 9.往回點開剛剛加入的joint2，並如joint下的操作，endpoint選擇Solid，並加入joint3、cadshape，並將下面的name改link2 \n 10.再找回joint3，並加入最後的link3， \n 11.最後在回到最頂端找回joint4，並將joint4的endpoint設為Solidrefeference，並選擇剛剛的link3 \n 12.回頭補上在endpoint下所有的boundobject，設為Mesh，並選擇對應的obj檔 \n 13.再加入physics \n 14.再找回每一階的joint下的jointparameters，每一階的axis旋轉方向都是z軸，因此設為0、0、1，並更改每一階的anchor，joint1的為0、0、0，joint2的為1.1061、0.2934、0，joint3的為1.6408、1.7845、0，joint4的為1.4、0、0(這些數據可使用solvespace獲得)(solvespace上的尺寸進入webot需要縮小100倍)。 \n 15.加入controller，並在joint1下的device加入Rotationalmotor並改名為motor \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n 1.先將校園ipv6改為老師事先規範過的個人ipv6，再將自己倉儲中的init.py檔中的ip改為老師規範的ipv6 \n 2.開啟webot --stream建立網頁串聯阜號，並開啟個人HW1的模擬 \n 3.使用http://localhost:1234/index.html \n 4.將下方網址輸入的localhost改為老師規範的ipv6，如影片上所示，即可作動 \n \n \n  editor1 結束  \n  ##########################################  \n 1.如EXAM3-1的1 2 3 4步驟相同，僅需將webot中模擬場景改為老師的three_digit_counter.7z \n 2.使用內建的controller並將seven_segment下的number改為自己學號 \n timestep = int(supervisor.getBasicTimeStep())\n    while supervisor.step(timestep) != -1:\n        try:\n            # Get user input for the number to display\n            number = 114\n            controller.display_number(number)\n        except ValueError:\n            print("Invalid input. Please enter an integer between 0 and 999.") \n 3.在網頁上重製場景即可 \n \n  editor1 結束  \n  ##########################################  \n 1.前置步驟與3-1、3-2是一樣的，要先設置好規範好的ipv6 \n 2.將老師的youbot_cart_w10_websocket下載下來 \n 3.將裡面的client、server的.py檔案放至SciTE使用，並將內容中最上面的pip install websocket-client websocket-server keyboard使用cmd下載下來 \n 4.使用cmd進行webot與網頁串聯 \n 5.SciTE中執行client跟server檔，因為youbot中的controller是extern，是指向外部 \n 6.在start.bat檔案中，必須將python路徑設置成set PYTHONPATH=%Disk%:\\Python313\\DLLs;%Disk%:\\Python313\\Lib;%Disk%:\\Python313\\Lib\\site-packages;%Disk%:\\NX\\NXBIN\\python;%Disk%:\\Webots_2023b\\msys64\\mingw64\\bin;%Disk% \n 7.python路徑下有一個REM for Webot 其中也得新增webot home set PYTHON_PATH=%Disk%:\\Python313 set WEBOTS_HOME=%Disk%:\\Webots_2023b \n 8.都執行完畢後就可以在localhost上執行，若第一次無法成功可以將webot重新啟動執行串流 \n 9. \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n > \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};